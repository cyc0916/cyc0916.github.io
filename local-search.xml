<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>cyc&#39;s Code Style</title>
    <link href="/2022/01/02/Code%20Style/"/>
    <url>/2022/01/02/Code%20Style/</url>
    
    <content type="html"><![CDATA[<p>所有头文件必须写在最开头，不应该使用<code>&quot;&quot;</code>而该使用<code>&lt;&gt;</code>，</p><p><code>#include</code>与<code>&lt;&gt;</code>之间需要有空格</p><p>注：非必要不使用<code>#include &lt;bits/stdc++.h&gt;</code></p><p>Example:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><br></code></pre></td></tr></table></figure><hr><p>可以使用<code>using namespace std;</code>也可以在具体代码中写入<code>std::</code>。</p><hr><p>关于大括号，若<code>if/for/while</code>等语句，在其内容中只有一行的，不应加大括号，使用空格分开</p><p>在必须加入大括号时，左括号不换行，有括号换行</p><p>Example:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>        l++,r--;<br>        <span class="hljs-keyword">if</span>(l&lt;=m) Ans++;<br>        <span class="hljs-keyword">else</span> Cnt--;<br>        <span class="hljs-keyword">if</span>(r&gt;s)&#123;<br>            Flag=<span class="hljs-literal">true</span>;<br>            Ans--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>关于空格的添加，非必要不添加空格在表达式中</p><hr><p>命名：统一使用驼峰命名和类匈牙利命名发，在名称仅有1～2个字符时除外</p><hr><p>关于输入输出，在输入过于复杂时在main函数外新建void类函数Input，用于输入，输出同理</p><p>在必须时使用<code>scanf和printf</code>，否则使用<code>cin和cout</code></p><p>尽量使用<code>cin.tie(0);cout.tie(0)</code>而不使用<code>ios::sync_with_stdio(false);</code></p><p>在使用快速输入时和快速输出时尽量都使用快速输入时和快速输出函数，而不是其他的输入输出方式</p><hr><p>Example:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br>    string s1,s2;<br>    <span class="hljs-keyword">int</span> Itr;<br>&#125;;<br><span class="hljs-keyword">int</span> Longa;<br>Node a;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">Read</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">char</span> ch=<span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span>(ch&lt;<span class="hljs-string">&#x27;0&#x27;</span>||ch&gt;<span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;<br>        ch=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>        x=x*<span class="hljs-number">10</span>+ch-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        ch=<span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> x*f;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>),x=-x;<br>    <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">9</span>) <span class="hljs-built_in">write</span>(x/<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x%<span class="hljs-number">10</span>+<span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">read</span>(Longa);<br>    cin&gt;&gt;a.s1&gt;&gt;a.s2;<br>    <span class="hljs-built_in">read</span>(a.Itr);<br>    <span class="hljs-keyword">if</span>(Itr&gt;<span class="hljs-number">0</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;I AK IOI\n&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">write</span>(a.s1);<br>    <span class="hljs-built_in">write</span>(a.s2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>OI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022</title>
    <link href="/2022/01/01/2022/"/>
    <url>/2022/01/01/2022/</url>
    
    <content type="html"><![CDATA[<p>2022年。</p><p>愿你所到之处 遍地阳光 愿你梦的远方 温暖为向。</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P7757 [COCI2012-2013#3] AERODROM 题解</title>
    <link href="/2021/11/20/%E6%B4%9B%E8%B0%B7P7757/"/>
    <url>/2021/11/20/%E6%B4%9B%E8%B0%B7P7757/</url>
    
    <content type="html"><![CDATA[<a class="btn" href="https://www.luogu.com.cn/problem/P7757"  title="题目传送门" target="_blank">题目传送门</a><h3 id="一道二分题"><a href="#一道二分题" class="headerlink" title="一道二分题"></a>一道二分题</h3><h4 id="如果使用贪心，则会有时间复杂度-O-m-log-n"><a href="#如果使用贪心，则会有时间复杂度-O-m-log-n" class="headerlink" title="如果使用贪心，则会有时间复杂度 O(m \log_{} {n})"></a>如果使用贪心，则会有时间复杂度 <script type="math/tex">O(m \log_{} {n})</script></h4><h4 id="因为数据范围-m-le-10-9-且-n-le-10-5-所以在最坏情况下会-TLE"><a href="#因为数据范围-m-le-10-9-且-n-le-10-5-所以在最坏情况下会-TLE" class="headerlink" title="因为数据范围 m \le 10^9 且 $n \le 10^5$ 所以在最坏情况下会 TLE"></a>因为数据范围 <script type="math/tex">m \le 10^9</script> 且 <code>$n \le 10^5$</code> 所以在最坏情况下会 TLE</h4><span id="more"></span><p>所以需要二分优化</p><p>什么二分呢</p><p>二分法分为二分查找与二分答案，二分查找注重于在一个集合（有序）里找到一个数，而二分答案注重于找到答案，简单来说，就是假设答案再判断对错，做调整</p><p>这里借用一张动图来方便大家来理解二分查找：</p><p><img src="https://img-blog.csdnimg.cn/24936c63a87444119ca219c0dd885020.gif" alt=""></p><p>根据动图，不难写出二分查找/答案的模版</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(l&lt;r)<br>&#123;<br>    mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid))<br>    &#123;<br>  r=mid;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>    l=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样一来 <script type="math/tex">O(x)</script> 的复杂度就降到了 <script type="math/tex">O( log\ x)</script></p><p>我们只需要根据题意改改模版即可</p><p><strong>此题思路：我们需要计算出每个服务台可办理的人数之和，然后判断是否大于，小于所给人数，进行二分法即可</strong></p><h3 id="AC-Code："><a href="#AC-Code：" class="headerlink" title="AC Code："></a>AC Code：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> n,m,t[<span class="hljs-number">100005</span>],ans,l=<span class="hljs-number">1</span>,r;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;t[i];<br>        <span class="hljs-keyword">if</span>(t[i]&gt;=r)<br>        &#123;<br>            r=t[i]; <span class="hljs-comment">//找到集合t中的最大值</span><br>        &#125;<br>    &#125;<br>    r=r*m;<span class="hljs-comment">//人数*服务台的最大时间，得最坏情况</span><br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> cnt,mid;<br>    <span class="hljs-keyword">while</span>(l&lt;r) <span class="hljs-comment">//此处也可以用一个函数去写</span><br>    &#123;<br>        mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>,cnt=<span class="hljs-number">0</span>; <span class="hljs-comment">//此处mid为l+r的一半</span><br>        <span class="hljs-comment">//并初始化cnt（用来计数人数之和）为0</span><br>        <span class="hljs-comment">//(x&gt;&gt;1)=(x/2)</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            cnt=cnt+mid/t[i]; <span class="hljs-comment">//计算出每个服务台能办理的人数之和</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt&gt;=m) <span class="hljs-comment">//人数之和超过了总人数</span><br>        &#123;<br>            r=mid; <span class="hljs-comment">//使二分范围的最右边变成当前中间值</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><span class="hljs-comment">//人数之和不到总人数</span><br>        &#123;<br>            l=mid+<span class="hljs-number">1</span>; <span class="hljs-comment">//使二分范围的最左边变成当前中间值+1（中间值已经判断过）</span><br>        &#125;<br>    &#125;<br>  <span class="hljs-comment">//二分完的结果是l=r，即最终答案，因此输出l或者r都可以</span><br>    cout&lt;&lt;r&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>有哪里说的不对或者不是很好的请提出！谢谢各位！</p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>洛谷</tag>
      
      <tag>COCI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P7745 [COCI2011-2012#3] ROBOT 题解</title>
    <link href="/2021/11/18/%E6%B4%9B%E8%B0%B7P7745/"/>
    <url>/2021/11/18/%E6%B4%9B%E8%B0%B7P7745/</url>
    
    <content type="html"><![CDATA[<a class="btn" href="https://www.luogu.com.cn/problem/P7745"  title="题目传送门" target="_blank">题目传送门</a><p>调了两个月终于调出来了</p><p>首先看数据范围： <script type="math/tex">1\le n \le 10^5</script> 且 <script type="math/tex">1\le m\le 3\times 10^5</script></p><span id="more"></span><p>纯根据题意模拟的 <script type="math/tex">O(n+mn)</script>肯定过不了</p><p>这时候就需要预处理。</p><h3 id="对于曼哈顿距离，我们可以把它想象成一个点到另一个点的最短路，这边放个图例来方便理解"><a href="#对于曼哈顿距离，我们可以把它想象成一个点到另一个点的最短路，这边放个图例来方便理解" class="headerlink" title="对于曼哈顿距离，我们可以把它想象成一个点到另一个点的最短路，这边放个图例来方便理解"></a>对于曼哈顿距离，我们可以把它想象成一个点到另一个点的最短路，这边放个图例来方便理解</h3><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/61zo4byi.png" alt=""></p><p>如图，容易发现：</p><p>图上 <script type="math/tex">x</script> 轴距离和为 $1+1=2$ ，<script type="math/tex">y</script> 轴距离和为$1+2=3$</p><p><script type="math/tex">x</script>,   <script type="math/tex">y</script> 轴距离和相加即为两个控制点到 ROBOT 的曼哈顿距离。</p><p>一提到预处理，首先我们想到的是前缀和。</p><p>求数组前缀和的方式十分简单，仅需要写一个循环，例如下方代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">2000000</span>;i++) <br>    xa[i]=xa[i<span class="hljs-number">-1</span>]+xa[i]; <span class="hljs-comment">//计算前缀和核心代码，下同</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">2000000</span>;i++) <br>    ya[i]=ya[i<span class="hljs-number">-1</span>]+ya[i];<br></code></pre></td></tr></table></figure><p>在得到前缀和后，根据题意，容易得出每次移动对于每个控制点到ROBOT的距离 $+1$ 或 <code>$-1$</code> ，我们只需要详细写出 $+1$ 或 $-1$ 即可。</p><p>同样的，这边放一个 gif 来演示收到 “J” 指令是的操作情况。</p><p><img src="https://bu.dusays.com/2021/11/16/127e4f7aab5b5.gif" alt=""><br>(如果 gif 挂了请@或私信我)</p><p>举例当指令为 “S” 时：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;S&#x27;</span>)&#123;<br>    tot=+yn[y+zs]; <span class="hljs-comment">//需要+1的数</span><br>    tot-=n-yn[y+zs]; <span class="hljs-comment">//除去需要+1的，即为需要-1的</span><br>    y++; <span class="hljs-comment">//对应题目</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在一系列例如上方的处理后，我们仅需要提前(在输入每个机器人坐标时)算出初始距离，并对这个初始距离进行加减即可。</p><p>写完后发现时间复杂度仅有 <script type="math/tex">O(n+m)</script>，可以轻松通过</p><p><strong>当然，此题也可以用 STL 中的 lower_bound 和 upper_bound 写。</strong></p><h3 id="需要注意的是，为防止数组下标为负数，需要给每一个数组下标都加一个常量"><a href="#需要注意的是，为防止数组下标为负数，需要给每一个数组下标都加一个常量" class="headerlink" title="需要注意的是，为防止数组下标为负数，需要给每一个数组下标都加一个常量!!!"></a>需要注意的是，为防止数组下标为负数，需要给每一个数组下标都加一个常量!!!</h3>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>洛谷</tag>
      
      <tag>COCI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSP2021 游记</title>
    <link href="/2021/11/14/CSP2021/"/>
    <url>/2021/11/14/CSP2021/</url>
    
    <content type="html"><![CDATA[<h1 id="初赛篇"><a href="#初赛篇" class="headerlink" title="初赛篇"></a>初赛篇</h1><h3 id="day-20"><a href="#day-20" class="headerlink" title="day -20"></a>day -20</h3><p>暑假集训回来了，疯狂补whk作业</p><h3 id="day-16"><a href="#day-16" class="headerlink" title="day -16"></a>day -16</h3><p>开学叻，whk的东西简单的一批，上课复习OI(初赛)</p><span id="more"></span><h3 id="day-14-day-10"><a href="#day-14-day-10" class="headerlink" title="day -14 - day -10"></a>day -14 - day -10</h3><p>高强度学初赛，做了3次模拟，分数分别为 38 59 77</p><h3 id="day-6"><a href="#day-6" class="headerlink" title="day -6"></a>day -6</h3><p>模拟可以稳到70，很大的进步</p><h3 id="day-2"><a href="#day-2" class="headerlink" title="day -2"></a>day -2</h3><p>好家伙，校队老师说拿奖给我整个颁奖典礼(目前来看好像咕了)</p><h3 id="day-1"><a href="#day-1" class="headerlink" title="day -1"></a>day -1</h3><p>颓了一天，喝点咖啡就睡了（</p><h2 id="day-0"><a href="#day-0" class="headerlink" title="day 0"></a>day 0</h2><p>去考场见到了许久未见的xyh巨佬，xyh和他的lq同学吊打我，并议论karry5307</p><p>开考了 S组难得一批，acos(-0.5)是啥我也不晓得，立体几何我也没学过，还考了四毛子，根本不会，手算base64，草，连猜带蒙结束了。</p><p>中午去吃了个牛排。。。接着对了下答案，S50左右，危</p><p>下午是J组 难度还行，居然考了个约瑟夫？约瑟夫直接上，不要太简单（记住这句话）</p><p>出来之后对答案居然也只有50左右，最有信心的约瑟夫竟然全错，明年再见了</p><h3 id="day-8"><a href="#day-8" class="headerlink" title="day 8"></a>day 8</h3><p>出分了，J66分，S55.5分，J组竟然卡线进了复赛，离谱，正好还收到了一台MacBook  Pro 双倍快乐！</p><h1 id="复赛篇"><a href="#复赛篇" class="headerlink" title="复赛篇"></a>复赛篇</h1><h3 id="day-15"><a href="#day-15" class="headerlink" title="day -15"></a>day -15</h3><p>大家好，窝又回来了！还有十几天就CSP复赛，但我连搜索的学不会</p><h3 id="day-14-day-8"><a href="#day-14-day-8" class="headerlink" title="day -14 - day -8"></a>day -14 - day -8</h3><p>哈哈 我真菜，快要放弃了/kk</p><h3 id="day-2-1"><a href="#day-2-1" class="headerlink" title="day -2"></a>day -2</h3><p>水了几天红题，信心大增</p><h3 id="day-1-1"><a href="#day-1-1" class="headerlink" title="day -1"></a>day -1</h3><p>早上<del>直接罢课</del>做了几题历年题，打印了些东西。。。</p><p>下午，在经过15min的共享单车和30min的地铁后，终于坐上了G<em>**</em>(<del>属实是忘了</del>)还是复兴号，因为2=座没了直接买了1=座，哈哈人生头一次1=座</p><h5 id="1-hour-later"><a href="#1-hour-later" class="headerlink" title="1 hour later"></a>1 hour later</h5><p>到了！杭州东，大城市就是不一样啊哈哈哈，不过这地铁网络购票为啥这么麻烦啊(比宁波麻烦多了)</p><p>再地铁上拿着小小的iPhone 5s问xyh巨佬住哪儿，惊了，居然住我楼下。</p><p>地铁上还碰到了一个很像老番茄的人</p><p>2130的地铁，人群还是熙熙攘攘，对比宁波地铁，这个时间点或许早已空无一人了吧 听着亲切却又陌生的杭州话，到站了，浙大紫金港</p><p>到了酒店已经2230，洗洗直接睡了</p><h3 id="day-0-1"><a href="#day-0-1" class="headerlink" title="day 0"></a>day 0</h3><p>起床，0630</p><p>在洛谷打卡后随便走了走，吃了个早饭就上考场了，不得不说学军真大…</p><p>面到了几个lq巨佬，没有见到xyh</p><p>学军就是不一样啊！电脑配这么好的。。。我们学校的开个浏览器都要半天，别说Dev了</p><p>拿 VS Code 打了快读和__int128板子，开考了，解压密码一遍过，好兆头。</p><p>拿到T1以为是dp，想了一下无果，看T2，T2纯模拟，写了个<script type="math/tex">O(n^3)</script>的暴力，甚至不想看T3/T4</p><p>后来实在无聊，回去看T1，发现是道数论，想了很久没推出公式，写了<script type="math/tex">O(n)</script>暴力，希望能得80</p><p>还有1:05，去看T3，原来是道大模拟，写了一半，没时间了，交了。</p><p>出考场看了眼T4，发现是神笔题，暴力甚至可以70，我是傻逼啊啊啊</p><p>预计/期望得分 <script type="math/tex">80+30+50+0=160</script></p><p>二等应该有了</p><p>中午去吃了🍝，还行，便宜，逛了下Apple的店，动车回家了</p><h3 id="day-1-2"><a href="#day-1-2" class="headerlink" title="day 1"></a>day 1</h3><p>补作业。</p><h3 id="day-12"><a href="#day-12" class="headerlink" title="day 12"></a>day 12</h3><p>出分了，居然<script type="math/tex">90+52+35+0=177</script>，带了个二等+4级勾回家，开心！</p><h2 id="完。"><a href="#完。" class="headerlink" title="完。"></a>完。</h2>]]></content>
    
    
    
    <tags>
      
      <tag>游记</tag>
      
      <tag>OI</tag>
      
      <tag>CSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
